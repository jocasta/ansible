---
# This playbook will install PostgreSQL Server
#
# postgres package installation 
#

# unless you have a good reason not to, switch selinux off
# if you keep this on you will likely have to fix ssh auth
# between barman and postgres

  - name: Install PostgreSQL Centos Repository
    yum:
      name: https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm
      state: present

  - name: Switch SELinux Off
    selinux:
      state: disabled
    tags: install

  - name: Install PostgreSQL Server packages
    yum:
      name: "{{ packages }}"
      state: present
    vars:
      packages:
      - postgresql{{ pg_ver }}-server
      - postgresql{{ pg_ver }}-contrib
      - postgresql{{ pg_ver }}-libs
      - postgresql{{ pg_ver }}
    tags: ['core_pg_packages','install']

  - name: Install additional packages
    yum:
      name: "{{ packages }}"
      state: present
    vars:
      packages:
      - python-psycopg2
    tags: ['core_pg_packages','all_packages']


# postgres will create this user anyway but ensure it exists and generate ssh keys

  - name: Add PostgreSQL User, generate SSH keys
    user:
      name: postgres
      group: postgres
      home: "{{ postgres_home }}"
      state: present
      generate_ssh_key: yes
    tags: ['user_profile']


## In a real situation you are likely to have mounted drives
## For localised testing here we just create directories.  
## The Below section would test the mount points
#
# get the file system structure correct
#  - name: Ensure mount points exist
#    command: mountpoint -q {{ item }}
#    register: volume_stat
#    failed_when: False
#    changed_when: False
#    with_items:
#    - "{{ data_mount }}" 
#    - "{{ temp_mount }}"  
#    - "{{ log_mount }}"
#    tags: ['fs_validation']

  - name: Ensure directories exists
    file:
      path: "{{ item }}" 
      state: directory
      owner: "{{ postgres_owner }}" 
      group: "{{ postgres_owner }}" 
      mode: 0755
    with_items:
      - "{{ data_dir }}"
      - "{{ temp_dir }}"
      - "{{ log_dir }}"
    tags: ['fs_validation']

#
# configure postgres user profile
#
  - name: Copy base .pgsql_profile
    template:
      src: templates/pgsql_profile.j2
      dest: "{{ postgres_home }}/.pgsql_profile"
      owner: "{{ postgres_owner }}"
      group: "{{ postgres_owner }}"
      mode: 0644
      backup: yes
    tags: ['user_profile']

  - name: Check if SSH keys exist
    stat:
      path: "{{ postgres_home }}/.ssh/id_rsa"
    register: ssh_exist

#  - name: Generate PostgreSQL SSH Keys
#   become_user: "{{ postgres_owner }}" 
#    shell: "ssh-keygen -t rsa -f {{ postgres_home }}/.ssh/id_rsa -q -P ''"
#    register: ssh_test
#    when: ssh_exist.stat.exists == False
#    tags: ['user_profile']

  - name: Ensure SSH keys set
    file:
      path: "{{ item }}"
      state: touch 
      owner: "{{ postgres_owner }}" 
      group: "{{ postgres_owner }}" 
      mode: 0600
    with_items:
      - "{{ postgres_home }}/.ssh/id_rsa"
      - "{{ postgres_home }}/.ssh/authorized_keys"
    tags: ['user_profile']

#
# Configure Firewall 
#

  - name: Start firewalld if not started
    ansible.builtin.service:
      name: firewalld
      state: started


  - name: Configure firewalld
    ansible.posix.firewalld:
      port: "{{ pg_port }}/tcp"
      permanent: yes
      state: enabled
      immediate: yes
    notify:  
      - Restart Firewalld
    tags: ['configure_instance']

#
# Configure PostgreSQL Instance
#

  - name: Enable systemd unit-file
    systemd:
      name: postgresql-{{ pg_ver }}
      enabled: yes

  - name: Create systemd override directory
    file:
      path: "/etc/systemd/system/postgresql-{{ pg_ver }}.service.d/"
      state: directory
      mode: 0644

  - name: Create PGPORT & PGDATA Override systemd File
    copy:
      mode: 0644
      content: |
               [Service]
               Environment=PGPORT={{pg_port}}
               Environment=PGDATA={{data_dir}}
      dest: "/etc/systemd/system/postgresql-{{ pg_ver }}.service.d/override.conf"


#
# Add Cron to clean up the postgres Log files
#

  - name: Create Cron entry to gzip logs and remove older logs
    cron:
      name: "Compress Postgres Logs & Remove Logs older then 30 days"
      minute: "0"
      hour: "0"
      user: postgres
      job: "find /log/postgres/ -name \"*.gz\" -mtime +30 -exec rm {} \\; && find /log/postgres/ -name \"*.log\" -mtime +3 -exec gzip {} \\; "

...
