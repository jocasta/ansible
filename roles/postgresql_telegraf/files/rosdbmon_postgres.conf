# RoS DBA monitoring
# PostgreSQL extensible

[[inputs.postgresql_extensible]]
  address = "host=localhost port=5432 user=rosdbmon dbname=postgres"

[inputs.postgresql_extensible.tags]
  rosdbmon = "0.14.X"

[[inputs.postgresql_extensible.query]]
  sqlquery="SHOW server_version"
#  version=901
  withdbname=false
  tagvalue=""

[[inputs.postgresql_extensible.query]]
  sqlquery="SELECT COUNT(*)::int AS total_db_connections FROM pg_stat_activity"
#  version=901
  withdbname=false
  tagvalue=""

[[inputs.postgresql_extensible.query]]
  sqlquery="select round((used / max_conn)*100)::int as pg_conn_prcnt from (select count(*)::real used from pg_stat_activity) a, (select setting::real max_conn from pg_settings where name=$$max_connections$$) b"
#  version=901
  withdbname=false
  tagvalue=""

[[inputs.postgresql_extensible.query]]
  sqlquery="SELECT 1::integer as pg_alive"
#  version=901
  withdbname=false
  tagvalue=""

[[inputs.postgresql_extensible.query]]
  sqlquery="select usename as dbuser, count(*)as dbuser_connections from pg_stat_activity group by dbuser"
#  version=901
  withdbname=false
  tagvalue="dbuser,dbuser_connections"

[[inputs.postgresql_extensible.query]]
  sqlquery="SELECT * FROM pg_stat_database"
#  version=901
  withdbname=false
  tagvalue=""

[[inputs.postgresql_extensible.query]]
  sqlquery="SELECT * FROM pg_stat_bgwriter"
#  version=901
  withdbname=false
  tagvalue=""

[[inputs.postgresql_extensible.query]]
  sqlquery="show port"
#  version=901
  withdbname=false
  tagvalue=""

[[inputs.postgresql_extensible.query]]
  sqlquery="show max_connections"
#  version=901
  withdbname=false
  tagvalue=""

[[inputs.postgresql_extensible.query]]
  sqlquery="select setting::integer as max_conn_pg from pg_settings where name='max_connections'"
#  version=901
  withdbname=false
  tagvalue=""

[[inputs.postgresql_extensible.query]]
  sqlquery="select setting::integer as port_pg from pg_settings where name='port'"
#  version=901
  withdbname=false
  tagvalue=""

[[inputs.postgresql_extensible.query]]
  sqlquery="SELECT case when pg_is_in_recovery() is true then 1 else 0 end as is_in_recovery;"
#  version=901
  withdbname=false
  tagvalue=""

[[inputs.postgresql_extensible.query]]
  sqlquery="SELECT extract (epoch from(now() - pg_postmaster_start_time())) as uptime_db"
#  version=901
  withdbname=false
  tagvalue=""

[[inputs.postgresql_extensible.query]]
  sqlquery="SELECT client_addr as pg_standby_ip from pg_stat_replication where application_name = 'walreceiver' or usename = 'repmgr'"
#  version=901
  withdbname=false
  tagvalue=""

[[inputs.postgresql_extensible.query]]
  sqlquery="SELECT pg_wal_lsn_diff(sent_lsn, write_lsn)::integer AS pg_rep_delta FROM pg_stat_replication"
  version=1001
  withdbname=false
  tagvalue=""

[[inputs.postgresql_extensible.query]]
  sqlquery=" SELECT CASE WHEN pg_last_wal_receive_lsn() = pg_last_wal_replay_lsn() THEN 0 ELSE EXTRACT (EPOCH FROM now() - pg_last_xact_replay_timestamp())::INTEGER END AS pg_rep_lag"
  version=1001
  withdbname=false
  tagvalue=""

[[inputs.postgresql_extensible.query]]
  sqlquery=" select case when setting = 'on' then 1 else 0 end as checksum_grafana from pg_settings where name = 'data_checksums'  "
#  version=901
  withdbname=false
  tagvalue=""

[[inputs.postgresql_extensible.query]]
  sqlquery=" select setting::int as work_mem from pg_settings where name = 'work_mem'  "
  withdbname=false
  tagvalue=""

[[inputs.postgresql_extensible.query]]
  sqlquery=" select (setting::int) * 8 as effective_cache_size from pg_settings where name = 'effective_cache_size'  "
  withdbname=false
  tagvalue=""

[[inputs.postgresql_extensible.query]]
  sqlquery=" select (setting::int) * 8 as shared_buffers from pg_settings where name = 'shared_buffers' "
  withdbname=false
  tagvalue=""


[[inputs.postgresql_extensible.query]]
  sqlquery="select usename, client_addr, CASE WHEN application_name in ( 'PostgreSQL JDBC Driver', '') and client_addr::text like '10.252%' THEN 'OpenShift On-Prem' WHEN application_name in ( 'PostgreSQL JDBC Driver', '') and client_addr::text like '10.40%' THEN 'OpenShift AWS' WHEN usename is null THEN 'backend_process' ELSE application_name END as application_name , count(*) from pg_stat_activity group by usename, client_addr, application_name order by count(*) desc ; "
  withdbname=false
  measurement='postgresql_sessions'
  tagvalue="usename,client_addr,application_name"
